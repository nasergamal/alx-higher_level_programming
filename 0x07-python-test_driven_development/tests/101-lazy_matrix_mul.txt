numpy matrix multiplication
===========================


	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul


	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	array([[ 7, 10],
	       [15, 22]])
	
	>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	array([[13, 16]])

	>>> lazy_matrix_mul([[3, 4], [5, 6]])
	Traceback (most recent call last):
	   ...
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

	>>> lazy_matrix_mul(None)
	Traceback (most recent call last):
 	   ...
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

	>>> lazy_matrix_mul("nope", [[1, 2]])
	Traceback (most recent call last):
	   ...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> lazy_matrix_mul([[1, 2]], 'NOPE')
	Traceback (most recent call last):
	   ...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> lazy_matrix_mul([[]], [[1, 2, 3], [4, 5, 6]])
	Traceback (most recent call last):
	   ...
	ValueError: shapes (1,0) and (2,3) not aligned: 0 (dim 1) != 2 (dim 0)

	>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[]])
	Traceback (most recent call last):
	   ...
	ValueError: shapes (2,3) and (1,0) not aligned: 3 (dim 1) != 1 (dim 0)

	>>> lazy_matrix_mul([['a', 'b'], ['c', 'd']], [[1, 2, 3], [4, 5, 6]])
	Traceback (most recent call last):
	  ...
	TypeError: invalid data type for einsum

	>>> lazy_matrix_mul([[1, 2], [4, 5]], [['a', 'b'], ['c', 'd']])
	Traceback (most recent call last):
	   ...
	TypeError: invalid data type for einsum

	>>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2, 3], [4, 5, 6]])
	Traceback (most recent call last):
	   ...
	ValueError: setting an array element with a sequence.

	>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4, 5]])
	Traceback (most recent call last):
	   ...
	ValueError: setting an array element with a sequence.

	>>> lazy_matrix_mul([[1, 2, 3], [3 , 4, 5]], [[6, 7], [8, 9]])
	Traceback (most recent call last):
	   ...
	ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
